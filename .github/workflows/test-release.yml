# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Test & Release

on:
  push:
    branches-ignore:
      - "**"
    tags:
      - "v*.*.*-dev.*"
      - "v*.*.*-rc.*"
      - "v*.*.*"

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2019]
    name: Build ${{ matrix.os }} artifact
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"

      - name: Setup Golang caches
        uses: actions/cache@v3
        if: always()
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-golang-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-

      - name: Build Windows
        if: matrix.os == 'windows-2019'
        run: go build -v -o altv.exe ./cmd/altv/...

      - name: Build Linux
        if: matrix.os == 'ubuntu-22.04'
        run: go build -v -o altv ./cmd/altv/*.go

      - name: Test
        run: go test -v ./cmd/altv/...

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cli-${{ matrix.os }}
          path: |
            ./altv.exe
            ./altv
          if-no-files-found: ignore

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-22.04
    needs: [build]
    permissions:
      contents: write
    steps:
      - name: Download windows artifacts
        uses: actions/download-artifact@v2
        with:
          name: cli-windows-2019
          path: dist-windows

      - name: Download linux artifacts
        uses: actions/download-artifact@v2
        with:
          name: cli-ubuntu-22.04
          path: dist-linux

      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          echo "VERSION=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.TAG }}

      - name: Upload windows artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist-windows/altv.exe
          asset_name: altv.exe
          asset_content_type: application/x-msdownload

      - name: Upload linux artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist-linux/altv
          asset_name: altv
          asset_content_type: application/octet-stream

  publish-npm:
    name: Publish NPM Package
    runs-on: ubuntu-22.04
    needs: [build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure git
        run: |
          git config user.name Timo
          git config user.email 44401485+Timo972@users.noreply.github.com

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: corepack pnpm ci

      - name: Build pre & post install scripts
        run: corepack pnpm run build

      - name: Extract version
        id: version
        shell: bash
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          TAG_REV=${TAG#*-}
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          echo "VERSION=${TAG#v}" >> $GITHUB_OUTPUT
          echo "NPM_TAG=${TAG_REV/.*/}" >> $GITHUB_OUTPUT

      - name: Set npm package version
        run: npm version ${{ steps.version.outputs.VERSION }} --no-commit-hooks --no-git-tag-version

      - name: Publish npm package under tag
        if: steps.version.outputs.NPM_TAG != ''
        run: npm publish --tag ${{ steps.version.outputs.NPM_TAG }} --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish npm package
        if: steps.version.outputs.NPM_TAG == ''
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }} 

  delete-artifacts:
    name: Delete artifacts
    runs-on: ubuntu-22.04
    needs: [create-release]
    if: ${{ always() }}
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            cli-ubuntu-22.04
            cli-windows-2019
